<pre class='metadata'>
Title: Guaranteed copy elision for named return objects
Shortname: D2025
Revision: 1
Audience: EWGI, EWG
Status: D
Group: WG21
URL:
!Current Source: <a href="https://github.com/Anton3/cpp-proposals/blob/master/draft/d2025r1.bs">https://github.com/Anton3/cpp-proposals/blob/master/draft/d2025r1.bs</a>
!Current: <a href="https://github.com/Anton3/cpp-proposals/blob/master/draft/d2025r1.html">https://github.com/Anton3/cpp-proposals/blob/master/draft/d2025r1.html</a>
Editor: Anton Zhilin, antonyzhilin@gmail.com
Markup Shorthands: markdown yes, biblio yes, markup yes, dfn yes
Default Highlight: c++
Abstract:
  This proposal aims to provide guaranteed copy elision for common cases of local variables being returned from a function.
Date: 2020-05-06
</pre>

<style>
ins {
  background-color: #CCFFCC;
  text-decoration: underline;
}
del {
  background-color: #FFCACA;
  text-decoration: line-through;
}
.warning-note {
  background-color: #FCFAEE;
  border-color: #E0CB52;
  overflow-x: auto;
  overflow-y: auto;
  clear: both;
}
</style>

# Revision history # {#revision}

R1 (post-Prague):
  - Required the type not to be trivially copyable
  - Fixed a wording issue where `return` statements in nested lambdas affected copy elision
  - Clarified the intent of allowing non-copyable, non-movable types
  - Renamed "named return object" to "return variable"
  - Expanded the Motivation section
  - Added more Examples
  - Added a subsection on `pin<T>` to Future directions

# Motivation # {#motivation}

<dfn dfn-type="abstract-op" lt="guaranteed copy elision">Guaranteed copy elision</dfn> means that in some scenarios that were (perhaps, potentially or previously) covered by <a href="http://eel.is/c++draft/class.copy.elision#3">copy elision</a>, copy-initialisation is now guaranteed not to happen, and the type that was previously potentially copied can now be non-copyable, non-movable. With the accepted [[P0135R0]] proposal, C++17 provides guaranteed copy elision for when a prvalue is returned from a function — this flavor of copy elision is known as Return Value Optimization (RVO). (The absence of copies flows naturally from the updated value categories, so it is no longer copy elision or an optimisation.)

```cpp
widget setup_widget(int x) {
  return widget(x);  // guaranteed "RVO"
}
```

Meanwhile, the other cases of copy elision are still optional. The flavor of copy elision that is allowed when a local variable is [$to return a variable|returned$] is known as Named Return Value Optimization (NRVO). As of C++20, NRVO is not guaranteed, which sometimes enforces rewriting the code in a way that is less readable or efficient.

## Construct-cook-return ## {#construct-cook-return}

Sometimes we want to create an object, set it up and return it.

```cpp
widget setup_widget(int x) {
  widget w;
  w.set_x(x);
  return w;  // non-guaranteed NRVO
}
```

Implementations usually perform NRVO in such simple cases, but `widget` must be at least movable. This situation is unacceptable in these cases, among others:

- If the setup process includes taking a pointer to `w` and storing it elsewhere
- If `widget` is non-copyable non-movable, because its memory location is critically important to its functionality, e.g. `std::mutex`
- If `widget` is non-copyable, because it manages resources that are not easy to copy, and non-movable, because it does not have an empty state, e.g. `open_file` and `not_null_ptr<T>`

On practice, the workaround can be either:

- Two-stage initialization, where a local variable is constructed in its destination (e.g. using the default constructor) and is then immediately passed to function(s) by reference in order to complete the setup of the object
- Always storing the object on heap, e.g. by returning `std::unique_ptr<widget>` instead of `widget` from factory functions

Both "solutions" are often viewed as anti-patterns. A proper solution should allow for the construct-cook-return pattern, even if a copy or move is not affordable.

## Construct-cleanup-return ## {#construct-cleanup-return}

With [[P1144R5]], we may be able to relocate elements out of containers, which should be more efficient:

```cpp
widget widget_owner::pilfer() {
  widget w = this->relocate_internal();
  this->cleanup_storage();
  return w;  // non-guaranteed NRVO
}
```

Unfortunately, such a clean-up work leads to the abscence of guaranteed copy elision. It can, however, be worked around using a facility like `scope_success` from [[P0052R9]]:

```cpp
widget widget_owner::pilfer() {
  auto s = scope_success([&]{ this->cleanup_storage(); });
  return this->relocate_internal();  // guaranteed "RVO"
}
```

The code rewritten in such a way is less straightforward and contains the potential overhead of `scope_success`.

## Operator rewrites ## {#operator-rewrites}

[[P1046R2]] proposes automatically generating `operator++(int)` for a type that implements `operator+=`. Its definition would look approximately as follows:

```cpp
T T::operator++(int) {
  T result = *this;  // intended copy
  *this += 1;
  return result;  // guaranteed NRVO
}
```

In order to deliver on the promise of guaranteed NRVO there, we would have to use the `scope_success` trick described above.

# Proposed solution # {#proposal}

If copy elision for a returned variable is allowed, and all <a href="http://eel.is/c++draft/stmt.if#def:discarded_statement">non-discarded</a> `return` statements in its <a href="http://eel.is/c++draft/basic.scope#def:potential_scope">potential scope</a> [$to return a variable|return$] the variable, then [$guaranteed copy elision|copy elision is guaranteed$]. The type of the variable is allowed to be non-copyable, non-movable.

(For the purposes of brevity, the explanation above is not rigorous; see [[#wording]] for a rigorous explanation.)

## Examples ## {#examples}

Constructing and returning a `widget`, guaranteed copy elision applies (since C++17):

```cpp
widget setup_widget(int x) {
  return widget(x);
}
```

Constructing, "cooking" and returning a `widget`, guaranteed copy elision applies:

```cpp
widget setup_widget(int x) {
  auto w = widget(x);
  int y = process(x);
  w.set_y(y);
  return w;
}
```

A more contrived example where guaranteed copy elision applies:

```cpp
widget setup_widget() {
  while (…) {
    auto w = widget(1);
    if (…) return w;
    if (…) break;
    if (…) throw …;
    if (…) return w;
  }
  return widget(2);
}
```

An example where guaranteed copy elision does not apply:

<xmp>
widget setup_widget() {
  auto w = widget(1);
  if (…) {
    return w;  //!
  } else {
    return widget(2);
  }
}
</xmp>

The example above can be "fixed" so that guaranteed copy elision does apply:

```cpp
widget setup_widget() {
  if (…) {
    auto w = widget(1);
    return w;
  } else {
    return widget(2);
  }
}
```

In the following example, `return two;` lies in the potential scope of `one`, so guaranteed copy elision does not apply to `one`:

<xmp>
widget test() {
  widget one;
  return one;  //!
  widget two;
  return two;
}
</xmp>

Constructing, setting up and passing an object as a parameter using an immediately invoked lambda expression (`consume_widget`'s parameter is directly initialized with `x`):

```cpp
void consume_widget(widget);

void test(int x) {
  int y = process(x);
  consume_widget([&] {
    auto w = widget(x);
    w.set_y(y);
    return w;
  }());
}
```

Guaranteed copy elision is unaffected by a nested class, a lambda capture and a discarded `return` statement:

```cpp
widget test() {
  widget w;
  struct s { widget f() { return widget(); } };
  auto l = [&w]() { return widget(); }();
  if constexpr (false) { return widget(); }
  return w;
}
```

Guaranteed copy elision applies in constant evaluation context:

```cpp
consteval std::mutex test() {
  std::mutex m;
  return m;
}
```

Guaranteed copy elision applies to all these return statements:

```cpp
widget test() {
  {
    {
      widget w1;
      if (toss_a_coin()) return w1;
    }
    widget w2;
    if (toss_a_coin()) return w2;
  }
  widget w3;
  return w3;
}
```

## Proposed wording ## {#wording}

The wording in this section is relative to WG21 draft [[!N4842]].

Add a new subclause of <a href="http://eel.is/c++draft/stmt.return">[stmt.return]</a>, <dfn dfn-type="dfn">[stmt.return.named]</dfn>:

<blockquote>
It is said that a `return` statement <dfn dfn-type="abstract-op" lt="to return a variable">returns</dfn> a variable when its operand is a (possibly parenthesized) *id-expression*, for which the name lookup (<a href="http://eel.is/c++draft/basic.lookup">[basic.lookup]</a>) finds the variable, unless the variable is captured by a *lambda-expression* enclosing the `return` statement.

A variable with automatic storage duration is called a <dfn dfn-type="abstract-op">return variable</dfn> when all of the following conditions are satisfied:

- the variable is not a function parameter and is not introduced by the *exception-declaration* of a handler (<a href="http://eel.is/c++draft/except.handle">[except.handle]</a>),

- the type of the variable is a class type, is not trivially-copyable, is not `volatile`-qualified, and is the same (ignoring cv-qualification) as the return type of the enclosing function, and

- all non-discarded (<a href="http://eel.is/c++draft/stmt.if">[stmt.if]</a>) `return` statements in its potential scope (<a href="http://eel.is/c++draft/basic.scope">[basic.scope]</a>) and in the same immediately enclosing function as the variable declaration, of which there is at least one, [$to return a variable|return$] the variable. [ *Note:* The enclosing function cannot be a coroutine. — *end note* ]

A [$return variable$] denotes the result object of the function call expression. Statements that [$to return a variable|return$] a return variable perform no copy-initialization (<a href="http://eel.is/c++draft/stmt.return">[stmt.return]</a>) and do not cause the destruction of the object (<a href="http://eel.is/c++draft/stmt.jump">[stmt.jump]</a>). [ *Note:* The *declaration-statement* of a return variable initializes the object denoted by it, see <a href="http://eel.is/c++draft/stmt.dcl">[stmt.dcl]</a>. On exit from the scope of a return variable, other than by executing a statement that [$to return a variable|returns$] it, the object denoted by it is destroyed, see <a href="http://eel.is/c++draft/stmt.jump">[stmt.jump]</a>. During stack unwinding, the object denoted by a return variable is destroyed, see <a href="http://eel.is/c++draft/except.ctor">[except.ctor]</a>. — *end note* ]
</blockquote>

<blockquote class="note warning-note">
Note:
The relationship "statement [$to return a variable|returns$] a variable" may be useful in other parts of the standard, e.g. in <a href="http://eel.is/c++draft/class.copy.elision#3">[class.copy.elision]/3</a>.
</blockquote>

<blockquote class="note warning-note">
Note:
A [$return variable$] is a variable. The definition carefully avoids mentioning the object it names before stating that the object is the result object of the function call expression (the "return object").
</blockquote>

<blockquote class="note warning-note">
Note:
The requirements on a [$return variable$] are intended to be the same as for the optional copy elision in `return` statements (<a href="http://eel.is/c++draft/class.copy.elision">[class.copy.elision]</a>), except for the last restriction mentioning `return` statements in the potential scope.
</blockquote>

Modify <a href="http://eel.is/c++draft/stmt.jump#2">[stmt.jump]/2</a>:

<blockquote>
On exit from a scope (however accomplished), objects with automatic storage duration that have been constructed in that scope <ins>(excluding the case described in [=[stmt.return.named]=])</ins> are destroyed in the reverse order of their construction. [ *Note:* For temporaries, see <a href="http://eel.is/c++draft/class.temporary">[class.temporary]</a>. — *end note* ] Transfer out of a loop, out of a block, or back past an initialized variable with automatic storage duration involves the destruction of objects with automatic storage duration that are in scope at the point transferred from but not at the point transferred to. (See <a href="http://eel.is/c++draft/stmt.dcl">[stmt.dcl]</a> for transfers into blocks). […]
</blockquote>

Modify <a href="http://eel.is/c++draft/stmt.return#2">[stmt.return]/2</a>:

<blockquote>
[…] A `return` statement with any other operand shall be used only in a function whose return type is not cv `void`; the `return` statement initializes the glvalue result or prvalue result object of the (explicit or implicit) function call by copy-initialization from the operand <ins>(excluding the case described in [=[stmt.return.named]=])</ins>. […]
</blockquote>

Modify <a href="http://eel.is/c++draft/stmt.dcl#2">[stmt.dcl]/2</a>:

> Variables with automatic storage duration are initialized each time their *declaration-statement* is executed. <ins>[ *Note:*</ins> Variables with automatic storage duration declared in the block are destroyed on exit from the block <ins>as described in</ins> <del>(</del> <a href="http://eel.is/c++draft/stmt.jump">[stmt.jump]</a> <del>)</del>. <ins>— *end note* ]</ins>

<blockquote class="note warning-note">
Note:
The modified sentence currently duplicates the specification in <a href="http://eel.is/c++draft/stmt.jump#2">[stmt.jump]/2</a>. If the sentence is turned into a reference, it will not have to duplicate the exception for return variables.
</blockquote>

Modify <a href="http://eel.is/c++draft/class.copy.elision#1">[class.copy.elision]/1</a>:

> Copy elision is not permitted where an expression is evaluated in a context requiring a constant expression (<a href="http://eel.is/c++draft/expr.const">[expr.const]</a>) and in constant initialization (<a href="http://eel.is/c++draft/basic.start.static">[basic.start.static]</a>). [ *Note:* Copy elision might be performed if the same expression is evaluated in another context. <ins>[=[stmt.return.named]=] requires in all contexts what would otherwise be copy elision.</ins> — *end note* ]

<blockquote class="note warning-note">
Note:
As with "Guaranteed RVO" of [[P0135R0]], "Guaranteed NRVO" is not specified as a special case of copy elision. Nevertheless, the proposed changes will affect the code constructs currently eligible for copy elision. Such copy elision is currently *prohibited* in `constexpr`-related contexts and is *optional* otherwise. With proposed changes, [=[stmt.return.named]=], when applies, *requires* copies not to occur, unless the object type is trivially-copyable (<a href="http://eel.is/c++draft/class.temporary#1">[class.temporary]/1</a>).
</blockquote>

# Frequently Asked Questions # {#faq}

## Are the proposed changes source or ABI breaking? ## {#abi}

The proposal does affect and **can break** constant expressions that rely on effects of the copy-initialization and destruction that are proposed to be elided. The defect report [[CWG2278]], requiring that copy elision is not performed in constant expressions, has been presented in March, 2018.

However, relying on the effects of copy-initialization and destruction in constant expressions is considered exotic, and real-world code breakage is deemed to be minimal.

The proposal is *not* source-breaking outside of constant expressions, because it mandates copy elision in some of the cases that are currently optional.

The proposal is *not* ABI-breaking, because, in all known implementations, whether NRVO is applied for a function does not impact its calling convention.

## What are the costs associated with the proposed changes? ## {#costs}

There is no runtime cost associated with the proposed copy elision, because storage for the return object is allocated on stack before the function body starts executing, in all known implementations.

The proposal will make declarations of local variables with automatic storage duration context-dependent: storage of a variable will depend on `return` statements in its potential scope. However, this analysis is local and purely syntactic. The impact on compilation times is thus deemed to be minimal.

Compilers that already do NRVO will enable it (or at least the required part of it) in all compilation modes. The proposal might even have a positive impact on compilation time, because such implementations will not have to check whether copy-initialization on the return type can be performed.

## What about trivially-copyable temporaries? ## {#trivial-temporaries}

According to <a href="http://eel.is/c++draft/class.temporary">[class.temporary]</a>, the implementation is allowed to create a copy when the object of a trivially-copyable type is returned. That is also the case when the copied object participates in "guaranteed RVO" (C++17) or "guaranteed NRVO" (proposed). If the address of such an object is saved to a pointer variable, the pointer will become dangling on return from the function:

```cpp
class A {
public:
  A* p;
  A() : p(this) {}
}

A rvo() {
  return A();
}
A x = rvo();   // a.p may be dangling

A* q{};
A nrvo() {
  A y = A();
  q = &y;
  return y;
}
A z = nrvo();  // z.p may be dangling
               // q may be dangling
```

Changing <a href="http://eel.is/c++draft/class.temporary">[class.temporary]</a> and prohibiting such temporaries would cause ABI breakage, and is infeasible. ABI issues aside, it is not desirable to prohibit optimizations related to liberal treatment of trivially-copyable types.

Regardless of trivially-copyable types, guaranteed copy elision is infeasible for non-class types, because a function call with result of a non-class type might not have a result object (see <a href="http://eel.is/c++draft/expr.prop#basic.lval-5">[expr.prop]/5</a>).

## Is "return variable" a good term choice? ## {#term}

A previous revision of this proposal (R0) used the term "named return object". That term choice was unfortunate, because it refers to a variable, not to an object. And a variable cannot be "unnamed", so that was excessive.

Some alternative choices: "result variable", "transparently returned variable".

# Alternative solutions # {#alternatives}

## Implement similar functionality using existing features ## {#existing-features}

We can implement similar functionality, with cooperation from the returned object type, in some cases.

Suppose the `widget` class defines the following constructor, among others:

```cpp
template <typename... Args, std::invocable<widget&> Func>
widget(Args&&... args, Func&& func)
  : widget(std::forward<Args>(args)...)
  { std::invoke(std::forward<Func>(func)), *this); }
```

We can then use it to observe the result object of a prvalue through a reference before returning it:

```cpp
widget setup_widget(int x) {
  int y = process(x);

  return widget(x, [&](widget& w) {
    w.set_y(y);
  });
}
```

However, it requires cooperation from `widget` and breaks when some of its other constructors accept an invocable parameter. We cannot implement this functionality in general.

## Guarantee NRVO in more cases ## {#more-nrvo}

```cpp
class builder {
public:
  builder();
  widget build();
  widget rebuild();
  …
};

widget foo() {
  builder b;
  widget w = b.build();
  if (…) return b.rebuild();
  return w;
}
```

NRVO will **not** be guaranteed for `w`, according to this proposal. Meanwhile, one could say that it could be guaranteed: if the condition is true, then we could arrange it so that `w` (which is stored as the return object) is destroyed before `b.rebuild()` is called.

However, what if `build` saves a pointer to the returned object, which is then used in `rebuild`? Then the `b.rebuild()` call will try to reach for `w`, which will lead to undefined behavior.

While the compiler can in some cases analyze the control flow and usage patterns (usually after inlining is performed), this is impossible in general. (This is why a previous attempt at guaranteeing NRVO was shut down, see [[CWG2278]].) The limitations of the proposed solution describe the cases where correctness can always be guaranteed without overhead and non-local reasoning.

## Require an explicit mark for return variables ## {#explicit-mark}

As an alternative, [$return variable|return variables$] could require a specific attribute or a mark of some sort in order to be eligible for guaranteed copy elision:

```cpp
widget setup_widget(int x) {
  auto w = widget(x) [[nrvo]];
  w.set_x(x);
  return w;
}
```

The benefit of requiring the mark is that the compiler would not have to determine for each local variable whether it could be a return variable. However, the cost of the compile-time checks is deemed to be low, while there would be some language complexity cost associated with the mark.

## Alias expressions ## {#alias-expressions}

Alias expressions would be a new type of expression. An <dfn dfn-type="abstract-op">alias expression</dfn> would accept a prvalue, execute a block, providing that block a "magical" reference to the result object of that prvalue, and the alias expression would itself be a prvalue with the original result object:

```cpp
widget setup_widget(int x) {
  return using (w = widget()) {
    w.set_x(x);
  };
}
```

Such a construct would require more wording and special cases on the behavior of the "magical" reference `w` and the underlying object. It would be prohibited to `return` from inside the block of the alias expression. More importantly, alias expressions would introduce the precedent of an expression that contains statements, which has issues with a lot of the standard. And as with [[#explicit-mark|explicit marks]], it introduces more syntax, which the proposed solution avoids.

Alias expressions could also be used to get rid of copies in places other than the return expressions, e.g. when passing a function argument by value:

```cpp
void consume_widget(widget);

void test(int x) {
  consume_widget(using (w = widget()) {
    w.set_x(x);
  });
}
```

The proposed solution can be used with an immediately invoked lambda expression to perform the same task:

```cpp
void consume_widget(widget);

void test(int x) {
  consume_widget([&] {
    widget w;
    w.set_x(x);
    return w;
  }());
}
```

# Future work # {#future-work}

## Guarantee some other types of copy elision ## {#more-elision}

<a href="http://eel.is/c++draft/class.copy.elision#1">[class.copy.elision]/1</a> describes 4 cases where copy elision is allowed. Let us review whether it is feasible to guarantee copy elision in those cases:

- (1.1) is feasible to guarantee with the limitations described in this proposal, because such an "optimization" is always correct, does not introduce overhead and does not require non-local reasoning.

- (1.2) leads to an extra allocation in case the control flow escapes the scope before the throw-expression is executed. It would only be feasible to guarantee when the scope contains no other jump statements, and all the functions called are `noexcept`. Those cases are deemed highly specific, but **can** be tackled in a separate proposal.

- (1.3) requires non-local reasoning and is therefore infeasible to guarantee.

- (1.4) covers two cases:
    - When the throw-expression and the try-block reside in different functions. In this case copy elision requires non-local reasoning and is infeasible to guarantee.
    - When they reside in the same function. Such code can be refactored so that this copy elision is unnecessary, unlike (1.1). This use case, if found beneficial enough, **can** be tackled in a separate proposal.

## Guarantee currently disallowed types of copy elision ## {#disallowed-elision}

Requiring copy elision in more cases than is currently allowed by the standard is a breaking change and is out of scope of this proposal. If another proposal that guarantees copy elision in more cases is accepted, those cases could also be reviewed for feasibility of guaranteed copy elision. This proposal will not be influenced by that future work.

## Reduce the number of moves performed in other cases ## {#other-moves}

This proposal belongs to a group of proposals that aim to reduce the number of moves performed in C++ programs. Within that group, there are two subgroups:

- Some proposals allow to replace moves with operations that are yet cheaper than moves (known as relocation or destructive move): [[N4158]], [[P0023R0]], [[P1144R4]].
- Other proposals aim to remove the need for moving altogether. This proposal, as well as [[P0927R2]], belongs to that group.

The problem solved by the current proposal is orthogonal to the problems dealt with by relocation proposals, as well as to the problem dealt with by P0927R2.

The current proposal combines with [[P0927R2]] nicely. That proposal requires that the lazy parameter is only used once (and forwarded to another lazy parameter or to its final destination), while in some cases it may be desirable to acquire and use it for some time before forwarding. This proposal would allow to achieve it in a clean way, see the immediately invoked lambda expression example.

The changes proposed by this proposal and [[P0927R2]], combined, would allow to implement alias expressions (see the corresponding section) without any extra help from the language:

```cpp
template <typename T, invokable<T&> Func>
T also([] -> T value, Func&& func) {
  T computed = value();
  func(computed);
  return computed;
}

void consume_widget(widget);

void test(int x) {
  consume_widget(also(widget(x), [&](auto& w) {
    w.set_x(x);
  }));
}
```

## `std::pin<T>` class ## {#pin}

For trivially copyable types, copy elision will still be non-guaranteed: the compiler may do a trivial copy if it "considers" that this will be beneficial for optimisation or for other reasons. Meanwhile, sometimes it is still highly desirable to have this guarantee, e.g. when a pointer to the variable is saved elsewhere. To help in this situation, we may want a non-movable wrapper:

```
template <typename T>
struct pin {
  T value;

  pin& operator=(pin&& other) = delete;
};

pin<int> test() {
  pin<int> result(42);
  watch(&result);
  return result;
}
```

For `pin` to be an aggregate, <a href="http://eel.is/c++draft/dcl.init.aggr">[dcl.init.aggr]</a> needs to be relaxed to allow user-declared copy and move constructors.

# Acknowledgements # {#acknowledgements}

Thanks to Agustín Bergé, Arthur O'Dwyer, Krystian Stasiowski and everyone else who provided feedback on a draft of this proposal.
